//
// Created by Jingtao Zhang on 17/11/3.
//

#ifndef COMPLICATION_BLOCK_H
#define COMPLICATION_BLOCK_H
/*kind的种类*/
#define CONSTANT 0
#define VARIABLE 1
#define PROCEDURE 2
#define LIT 0
#define LOD 1
#define STO 2
#define CAL 3
#define INT 4
#define JMP 5
#define JPC 6
#define OPR 7

#define ADD 1
#define SUB 2
#define MUL 3
#define DIV 4
#define MERGE 5
#define EQUAL 6
#define SMALLER 7
#define GRATER 8
#define ESMALLER 9
#define EGRATER 10
#define NOTEQUAL 11
#define READ 12
#define WRITE 13
#define CLC 14


#define TKIND 0
#define TVALUE 1
#define TLEAVEL 2
#define TADDR 3

#include <stack>
#include <string>
#include <fstream>

#define word_ans "/Users/zjtao/CLionProjects/complication/word_ans.txt"

class BLOCK {
public:
    BLOCK();

    bool haveword();
    bool Getword();         // 获得一个新单词
    bool Getword(int i);    // 跳过(i-1)个单词，取得一个新单词
    void Analyconst();      // 分析常量
    void Analyvar();        // 分析变量量
    void Analyprocedure();  // 分析程序
    int comparepri(std::string a, std::string b);//优先级比较
    void Analystatement();          // 分析表达式
    int get_table_index(std::string name,int kind);// 查表
    void run();             // 运行语法分析
    void S();               // 单条语句语法分析入口
    int Getsize(int lo);    // 获得该程序
    void IF_THEN_OR_ELSE(); // IF_THEN 或者 IF_THEN_ELSE分析
    void WHILE_DO();        // WHILE DO 语句分析
    void emit(int a,int b,int c); // 存放语句
    void BEGIN_END();       // begin end 分析
    void Analycondition();  // 条件语句的分析
    void p();               // 打印表格

    std::ifstream input;    // 单词输入
    std::string word;       // 当前单词
    /***************************************/
    int type;               // 名称类型
    std::stack<int> leavel; // 层次堆栈
    std::stack<int> addr;   // 当前层次，地址偏移堆栈
    std::stack<int> SIN;    // space Procedure needed
    std::stack<int> PIN;    // addr Procedure start
    bool prostart;          // 是否已经为程序分配内存空间
    int main;               // 记录主程序的起始地址
    /***************************************/
    //表格的创建
    std::string *name;     // 实验二中的表格
    int **table;           //
    int index;
    /***************************************/
    std::string *expression; //处理表达式
    /***************************************/
    std::string tab;       // 缩进
    /***************************************/
    int **code;            // 生成的目标代码
    int code_index;

//    ----------------------------------------算符优先关系表----------------------------------------
//            |    +    |    -    |    *    |    /    |    (    |    )    |    i    |    #    |
//    ------------------------------------------------------------------------------------------
//    |   +    |    1    |    1    |   -1    |   -1    |    -1    |    1    |    -1    |    1    |
//    ------------------------------------------------------------------------------------------
//    |   -    |    1    |    1    |   -2    |   -2    |    -1    |    1    |    -1    |    1    |
//    ------------------------------------------------------------------------------------------
//    |   *    |    1    |    1    |    1    |    1    |    -1    |    1    |    -1    |    1    |
//    ------------------------------------------------------------------------------------------
//    |   /    |    1    |    1    |    1    |    1    |    -1    |    1    |    -1    |    1    |
//    ------------------------------------------------------------------------------------------
//    |   (    |    -1   |    -1   |   -1    |   -1    |    -1    |    0    |    -1    |   -2    |
//    ------------------------------------------------------------------------------------------
//    |   )    |    1    |    1    |    1    |    1    |   -2     |    1    |    -2    |    1    |
//    ------------------------------------------------------------------------------------------
//    |   i    |    1    |    1    |    1    |    1    |    -2    |    1    |   -2     |    1    |
//    ------------------------------------------------------------------------------------------
//    |   #    |    -1   |    -1   |    -1   |    -1   |    -1    |   -2    |    -1    |    0    |
//    ------------------------------------------------------------------------------------------
    int priority[8][8] =
            {1, 1, -1, -1, -1, 1, -1, 1,
             1, 1, -2, -2, -1, 1, -1, 1,
             1, 1, 1, 1, -1, 1, -1, 1,
             1, 1, 1, 1, -1, 1, -1, 1,
             -1, -1, -1, -1, -1, 0, -1, -2,
             1, 1, 1, 1, -2, 1, -2, 1,
             1, 1, 1, 1, -2, 1, -2, 1,
             -1, -1, -1, -1, -1, -2, -1, 0,
            }; //优先级
};


#endif //COMPLICATION_BLOCK_H


//----------------------------------------算符优先关系表----------------------------------------
//|        |    +    |    -    |    *    |    /    |    (    |    )    |    i    |    #    |
//------------------------------------------------------------------------------------------
//|   +    |    >    |    >    |         |         |    <    |    >    |    <    |    >    |
//------------------------------------------------------------------------------------------
//|   -    |    >    |    >    |         |         |    <    |    >    |    <    |    >    |
//------------------------------------------------------------------------------------------
//|   *    |    >    |    >    |    >    |    >    |    <    |    >    |    <    |    >    |
//------------------------------------------------------------------------------------------
//|   /    |    >    |    >    |    >    |    >    |    <    |    >    |    <    |    >    |
//------------------------------------------------------------------------------------------
//|   (    |    <    |    <    |         |         |    <    |    =    |    <    |         |
//------------------------------------------------------------------------------------------
//|   )    |    >    |    >    |    >    |    >    |         |    >    |         |    >    |
//------------------------------------------------------------------------------------------
//|   i    |    >    |    >    |    >    |    >    |         |    >    |         |    >    |
//------------------------------------------------------------------------------------------
//|   #    |    <    |    <    |         |         |    <    |         |    <    |    =    |
//------------------------------------------------------------------------------------------